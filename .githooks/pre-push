#!/bin/sh

#eceprog uses dash for some reason so no bash functions for us rip

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

echo "\starting\n"

STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.ts\?$')

if [ "$STAGED_FILES" = "" ]; then
  exit 0
fi

PASS=true


echo "\nValidating Typescript Files using gts lint:\n"


# Check for eslint
ESLINT="$(git rev-parse --show-toplevel)/node_modules/.bin/gts"

if [[ ! -x "$ESLINT" ]]; then
  echo "\t\033[41mPlease install ESlint\033[0m (npm i --save --save-exact --dev eslint)"
  exit 1
fi

echo "we are here now\n"
for FILE in $STAGED_FILES
do
  echo "in for loop\n"
  eslint "$FILE"
echo "did the lint\n"
  if [[ "$?" == 0 ]]; then
    echo "\t\033[32mESLint Passed: $FILE\033[0m"
  else
    echo "\t\033[41mESLint Failed: $FILE\033[0m"
    PASS=false
  fi
done

echo "\Typescript validation completed!\n"


if ! $PASS; then
  echo "\033[41mCOMMIT FAILED:\033[0m Your commit contains files that should pass ESLint but do not. Please fix the ESLint errors and try again.\n"
  exit 1
else
  echo "\033[42mCOMMIT SUCCEEDED\033[0m\n"
fi


echo "---- Pre-push Git hook finished running! ----" 

exit $?
